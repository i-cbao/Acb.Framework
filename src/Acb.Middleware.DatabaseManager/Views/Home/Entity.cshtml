@using Acb.Core.Extensions
@using Acb.Core.Helper
@using Acb.Middleware.DatabaseManager.Domain.Enums
@model Acb.Middleware.DatabaseManager.Domain.Models.Table
@{
    var provider = ViewData.GetValue<DbProvider>("Provider");
    var primary = Model.PrimaryColumn;
    const Language language = Language.CSharp;
}
<div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <h4 class="modal-title">@Model.Name<small style="margin-left: 15px">@Model.Description</small></h4>
        </div>
        <div class="modal-body">
            <div>
                <pre>
<code class="cs"><text>///&lt;summary&gt; @(string.IsNullOrWhiteSpace(Model.Description) ? Model.Name : Model.Description) &lt;/summary&gt;</text>
[Naming("@Model.Name")]
public class @Model.ConvertedName: BaseEntity&lt;@(primary?.LanguageType(provider, language) ?? "string")&gt;
{@foreach (var col in Model.Columns)
 {
     <text>
    ///&lt;summary&gt; @(RegexHelper.ClearTrn(string.IsNullOrWhiteSpace(col.Description) ? col.Name : col.Description)) &lt;/summary&gt;
    @if (col.IsConverted)
    {
        <text>    [Naming("@col.Name")]
</text>
    }
    public @(col.IsPrimaryKey ? "override " : "")@col.LanguageType(provider, language) @col.ConvertedName { get; set; }
</text>
 }
}</code>
</pre>
            </div>
        </div>
    </div>
</div>