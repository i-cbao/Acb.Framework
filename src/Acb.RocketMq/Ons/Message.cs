//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace ons {

public class Message : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Message(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Message obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Message() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ONSClient4CPPPINVOKE.delete_Message(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Message() : this(ONSClient4CPPPINVOKE.new_Message__SWIG_0(), true) {
  }

  public Message(string topic, string tags, string byte_body) : this(ONSClient4CPPPINVOKE.new_Message__SWIG_1(topic, tags, byte_body), true) {
    if (ONSClient4CPPPINVOKE.SWIGPendingException.Pending) throw ONSClient4CPPPINVOKE.SWIGPendingException.Retrieve();
  }

  public Message(string topic, uint topic_size, string tags, uint tags_size, string body, uint body_size) : this(ONSClient4CPPPINVOKE.new_Message__SWIG_3(topic, topic_size, tags, tags_size, body, body_size), true) {
  }

  public Message(string topic, string tags, string keys, string body) : this(ONSClient4CPPPINVOKE.new_Message__SWIG_4(topic, tags, keys, body), true) {
  }

  public Message(Message other) : this(ONSClient4CPPPINVOKE.new_Message__SWIG_5(Message.getCPtr(other)), true) {
    if (ONSClient4CPPPINVOKE.SWIGPendingException.Pending) throw ONSClient4CPPPINVOKE.SWIGPendingException.Retrieve();
  }

  public void putUserProperties(string key, string value) {
    ONSClient4CPPPINVOKE.Message_putUserProperties(swigCPtr, key, value);
  }

  public string getUserProperties(string key) {
    string ret = ONSClient4CPPPINVOKE.Message_getUserProperties__SWIG_0(swigCPtr, key);
    return ret;
  }

  public void setUserProperties(SWIGTYPE_p_std__mapT_std__string_std__string_t userProperty) {
    ONSClient4CPPPINVOKE.Message_setUserProperties(swigCPtr, SWIGTYPE_p_std__mapT_std__string_std__string_t.getCPtr(userProperty));
    if (ONSClient4CPPPINVOKE.SWIGPendingException.Pending) throw ONSClient4CPPPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__mapT_std__string_std__string_t getUserProperties() {
    SWIGTYPE_p_std__mapT_std__string_std__string_t ret = new SWIGTYPE_p_std__mapT_std__string_std__string_t(ONSClient4CPPPINVOKE.Message_getUserProperties__SWIG_1(swigCPtr), true);
    return ret;
  }

  public void putSystemProperties(string key, string value) {
    ONSClient4CPPPINVOKE.Message_putSystemProperties(swigCPtr, key, value);
  }

  public string getSystemProperties(string key) {
    string ret = ONSClient4CPPPINVOKE.Message_getSystemProperties__SWIG_0(swigCPtr, key);
    return ret;
  }

  public void setSystemProperties(SWIGTYPE_p_std__mapT_std__string_std__string_t systemProperty) {
    ONSClient4CPPPINVOKE.Message_setSystemProperties(swigCPtr, SWIGTYPE_p_std__mapT_std__string_std__string_t.getCPtr(systemProperty));
    if (ONSClient4CPPPINVOKE.SWIGPendingException.Pending) throw ONSClient4CPPPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__mapT_std__string_std__string_t getSystemProperties() {
    SWIGTYPE_p_std__mapT_std__string_std__string_t ret = new SWIGTYPE_p_std__mapT_std__string_std__string_t(ONSClient4CPPPINVOKE.Message_getSystemProperties__SWIG_1(swigCPtr), true);
    return ret;
  }

  public string getTopic() {
    string ret = ONSClient4CPPPINVOKE.Message_getTopic(swigCPtr);
    return ret;
  }

  public void setTopic(string topic) {
    ONSClient4CPPPINVOKE.Message_setTopic(swigCPtr, topic);
  }

  public string getTag() {
    string ret = ONSClient4CPPPINVOKE.Message_getTag(swigCPtr);
    return ret;
  }

  public void setTag(string tags) {
    ONSClient4CPPPINVOKE.Message_setTag(swigCPtr, tags);
  }

  public string getKey() {
    string ret = ONSClient4CPPPINVOKE.Message_getKey(swigCPtr);
    return ret;
  }

  public void setKey(string keys) {
    ONSClient4CPPPINVOKE.Message_setKey(swigCPtr, keys);
  }

  public string getMsgID() {
    string ret = ONSClient4CPPPINVOKE.Message_getMsgID(swigCPtr);
    return ret;
  }

  public void setMsgID(string msgId) {
    ONSClient4CPPPINVOKE.Message_setMsgID(swigCPtr, msgId);
  }

  public long getStartDeliverTime() {
    long ret = ONSClient4CPPPINVOKE.Message_getStartDeliverTime(swigCPtr);
    return ret;
  }

  public void setStartDeliverTime(long level) {
    ONSClient4CPPPINVOKE.Message_setStartDeliverTime(swigCPtr, level);
  }

  public string getBody() {
    string ret = ONSClient4CPPPINVOKE.Message_getBody(swigCPtr);
    return ret;
  }

  public string getMsgBody() {
    string ret = ONSClient4CPPPINVOKE.Message_getMsgBody(swigCPtr);
    return ret;
  }

  public void setMsgBody(string msgbody) {
    ONSClient4CPPPINVOKE.Message_setMsgBody(swigCPtr, msgbody);
    if (ONSClient4CPPPINVOKE.SWIGPendingException.Pending) throw ONSClient4CPPPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setBody(byte[] byte_msgbody, int len) {
    ONSClient4CPPPINVOKE.Message_setBody(swigCPtr, byte_msgbody, len);
  }

  public int getReconsumeTimes() {
    int ret = ONSClient4CPPPINVOKE.Message_getReconsumeTimes(swigCPtr);
    return ret;
  }

  public void setReconsumeTimes(int reconsumeTimes) {
    ONSClient4CPPPINVOKE.Message_setReconsumeTimes(swigCPtr, reconsumeTimes);
  }

  public long getStoreTimestamp() {
    long ret = ONSClient4CPPPINVOKE.Message_getStoreTimestamp(swigCPtr);
    return ret;
  }

  public void setStoreTimestamp(long storeTimestamp) {
    ONSClient4CPPPINVOKE.Message_setStoreTimestamp(swigCPtr, storeTimestamp);
  }

  public string toString() {
    string ret = ONSClient4CPPPINVOKE.Message_toString(swigCPtr);
    return ret;
  }

  public string toSystemString() {
    string ret = ONSClient4CPPPINVOKE.Message_toSystemString(swigCPtr);
    return ret;
  }

  public string toUserString() {
    string ret = ONSClient4CPPPINVOKE.Message_toUserString(swigCPtr);
    return ret;
  }

  public long getQueueOffset() {
    long ret = ONSClient4CPPPINVOKE.Message_getQueueOffset(swigCPtr);
    return ret;
  }

  public void setQueueOffset(long queueOffset) {
    ONSClient4CPPPINVOKE.Message_setQueueOffset(swigCPtr, queueOffset);
  }

}

}
